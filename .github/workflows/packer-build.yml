name: Packer Build

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  pytest-merge:
    name: Pytest
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres

    env:
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"

    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: |
            requirements.txt

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test with pytest
        run: pytest


  packer-build:
    name: Packer Build
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.REGION }}

    if: github.event.pull_request.merged == true
    steps:

    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Packer
      run: sudo apt-get update && sudo apt-get install -y packer
    - name: Initialize packer
      run: packer init packer
    - name: Build Packer image
      run: packer build packer
    
  update-launch-template:
    name: Update launch template
    runs-on: ubuntu-latest
    needs: packer-build
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
      AWS_DEFAULT_REGION: ${{ secrets.REGION }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install AWS CLI
      run: |
        sudo apt-get update && sudo apt-get install -y awscli

    - name: Get latest AMI ID
      id: vars
      run: |
        latest_ami=$(aws ec2 describe-images --executable-users self --query 'sort_by(Images, &CreationDate)[-1].ImageId' --output text)
        echo "Latest AMI ID: $latest_ami"

        version_number=$(aws ec2 describe-launch-template-versions --launch-template-name webAppLaunchTemplate --query 'sort_by(LaunchTemplateVersions, &VersionNumber)[-1].VersionNumber' --output text)
        echo "Latest AMI version: $version_number"

        echo "latest_ami=$latest_ami" >> $GITHUB_OUTPUT
        echo "version_number=$version_number" >> $GITHUB_OUTPUT

    - name: Create new Launch Template version
      run: |
        aws ec2 create-launch-template-version --launch-template-name webAppLaunchTemplate  --launch-template-data "ImageId=${{ steps.vars.outputs.latest_ami }}" --source-version ${{ steps.vars.outputs.version_number }}
    
    - name: Autoscaling group instance refresh
      run: |
        aws autoscaling start-instance-refresh --auto-scaling-group-name webAppAutoScalingGroup --strategy Rolling --desired-configuration '{"LaunchTemplate": {"LaunchTemplateName":"webAppLaunchTemplate", "Version":"$Latest"}}'

    - name: Check the status of instance refresh
      run: |
        status="Pending"
        retries=0

        # Poll the status using the describe-instance-refreshes command
        while [ "$status" != "Successful" ] && [ "$status" != "Cancelled" ] && [ "$retries" -lt 30 ]; do
          sleep 60s  # Wait for 60 seconds before polling again

          # Retrieve the instance refresh status
          status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name webAppAutoScalingGroup --query 'InstanceRefreshes[0].Status' --output text)

          # Increment retries
          retries=$((retries+1))
        done

        # Check the final status
        if [ "$status" != "Successful" ] && [ "$status" != "Cancelled" ]; then
          echo "Instance refresh did not complete successfully. Exiting..."
          exit 1
        fi